{"version":3,"sources":["components/Title/Title.js","context/todosContext.js","components/AddTodoForm/AddTodoForm.js","components/TodosList/Todo/Todo.js","components/TodosList/TodosList.js","types.js","reducers/todosReducer.js","App.js","serviceWorker.js","index.js"],"names":["Title","title","createContext","todos","addTodo","deleteTodo","getTodos","AddTodoForm","context","useContext","todosContext","inputRef","useRef","noValidate","onSubmit","event","preventDefault","todo","id","Math","round","random","name","current","value","isComplete","type","placeholder","ref","Todo","props","checked","onChange","toggleTodo","onClick","removeTodo","style","marginLeft","fontSize","color","TodosList","map","key","ADD_TODO","LOAD_TODOS","TOGGLE_TODO","REMOVE_TODO","initialState","state","action","payload","updated_todos","filter","console","log","App","useReducer","todosReducer","dispatch","useEffect","JSON","parse","window","localStorage","getItem","Provider","setItem","stringify","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29ab15de.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = ({title}) => {\n    return(\n        <h1>{title}</h1>\n    )\n}\n\nexport default Title;","// export context\nimport { createContext } from 'react';\n\nexport default createContext({\n    todos: [],\n    addTodo: () => {},\n    deleteTodo: () => {},\n    getTodos: () => {}\n})","import React, { useContext, useRef } from 'react';\nimport todosContext from '../../context/todosContext'\n\nconst AddTodoForm = () => {\n\n    const context = useContext(todosContext);\n    const inputRef = useRef('');\n\n    const onSubmitHandler = event => {\n        event.preventDefault();\n\n        let todo = {}\n        todo.id = Math.round(Math.random() * 1000);\n        todo.name = inputRef.current.value;\n        todo.isComplete = false;\n\n        context.addTodo(todo)\n        inputRef.current.value = null\n    }\n\n    return(\n        <div>\n            <form noValidate onSubmit={onSubmitHandler}>\n                <input type=\"text\" placeholder=\"add new todo\" ref={inputRef} />\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default AddTodoForm;","import React, { useContext } from 'react';\nimport todosContext from '../../../context/todosContext';\n\n\nconst Todo = (props) => {\n\n    const context = useContext(todosContext);\n\n    return (\n      <div>\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={props.isComplete}\n            onChange={() => context.toggleTodo(props.id)}\n          />\n          {props.name}\n        </label>\n        <button onClick={() => context.removeTodo(props.id)} style={{marginLeft: '10px', fontSize: '10px', color: 'red'}}>remove</button>\n      </div>\n    );\n}\n\nexport default Todo;","import React, { useContext } from 'react';\nimport todosContext from '../../context/todosContext';\nimport Todo from '../../components/TodosList/Todo/Todo'\n\nconst TodosList = () => {\n\n    const context = useContext(todosContext);\n\n    const todos = context.todos.map(todo => <Todo key={todo.id} {...todo} />)\n\n    return(\n        <div>\n            {todos}\n        </div>\n    )\n}\n\nexport default TodosList;","export const ADD_TODO = 'ADD_TODO';\nexport const LOAD_TODOS = 'GET_TODOS';\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\n","import { ADD_TODO, LOAD_TODOS, TOGGLE_TODO, REMOVE_TODO } from \"../types\";\n\nconst initialState = {\n  todos: []\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: action.payload\n      };\n    case TOGGLE_TODO:\n      return toggleTodo(state, action.payload);\n    case REMOVE_TODO:\n      return removeTodo(state, action.payload);\n    default:\n      return state;\n  }\n};\n\nconst toggleTodo = (state, id) => {\n  let updated_todos = state.todos.map(todo => {\n    if(todo.id === id) {\n      return {\n        ...todo,\n        isComplete: !todo.isComplete\n      }\n    } else {\n      return todo\n    }\n  })\n\n  return {\n    ...state,\n    todos: updated_todos\n  }\n}\n\nconst removeTodo = (state, id) => {\n  let updated_todos = state.todos.filter(todo => {\n    if (todo.id === id) {\n      return null\n    } else {\n      return todo;\n    }\n  });\n\n  console.log(\"Remove todo: \", updated_todos);\n\n  return {\n    ...state,\n    todos: updated_todos\n  };\n};\n","import React, { useReducer, useEffect } from 'react';\nimport './App.css';\n\nimport Title from './components/Title/Title';\nimport AddTodoForm from './components/AddTodoForm/AddTodoForm';\nimport TodosList from './components/TodosList/TodosList';\n\nimport TodosContext from './context/todosContext';\nimport todosReducer from './reducers/todosReducer';\nimport { ADD_TODO, LOAD_TODOS, TOGGLE_TODO, REMOVE_TODO } from './types';\n\n\nfunction App() {\n\n  const initialState = {\n    todos: []\n  }\n\n  const [state, dispatch] = useReducer(todosReducer, initialState)\n  \n  // load todos from local storage\n  useEffect(() => {\n    console.log('Load todos from local starage')\n    const todos = JSON.parse(window.localStorage.getItem('custom-hook-todos'));\n\n    if(todos) {\n      dispatch({type: LOAD_TODOS, payload: todos})\n    }\n  }, [])\n\n  const addTodo = todo => {\n    let updated_todos = [...state.todos, todo];\n\n    window.localStorage.setItem('custom-hook-todos', JSON.stringify(updated_todos));  \n\n    \n    dispatch({type: ADD_TODO, payload: todo})\n  }\n\n  const toggleTodo = id => {\n    // update local storage\n    let updated_todos = [...state.todos].map(todo => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          isComplete: !todo.isComplete\n        };\n      } else {\n        return todo;\n      }\n    });\n\n    window.localStorage.setItem(\n      \"custom-hook-todos\",\n      JSON.stringify(updated_todos)\n    );\n    \n    // dispatch action\n    dispatch({type: TOGGLE_TODO, payload: id})\n  }\n\n  const removeTodo = id => {\n    // update local storage\n    let updated_todos = [...state.todos].filter(todo => {\n      if (todo.id === id) {\n        return null\n      } else {\n        return todo;\n      }\n    });\n\n    window.localStorage.setItem(\n      \"custom-hook-todos\",\n      JSON.stringify(updated_todos)\n    );\n    \n    // dispatch action\n    dispatch({type: REMOVE_TODO, payload: id})\n  }\n  \n  return (\n    <TodosContext.Provider value={{todos: state.todos, addTodo, toggleTodo, removeTodo}}>\n      <div className=\"App\">\n        <Title title=\"Local Storage Todos\" />\n        <AddTodoForm />\n        <TodosList />\n      </div>\n    </TodosContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}